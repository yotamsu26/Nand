// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put your code here:
	
	// instruction meaningful name
	Not(in=instruction[15], out=ainstruction);
	Not(in=ainstruction, out=cinstruction);
	
	// ALU compute
	ExtendAlu(x=outD,y=secMuxOut,
		instruction=instruction[6..14],
		out=ALUoutput,
		out=outM,
		zr=zr,
		ng=ng);
	
	
	// check if A or C insturction
	Mux16(a=instruction,b=ALUoutput,sel=instruction[15],out=firstMuxOut);
	
	// check if compute the A register or the M register
	And(a=cinstruction,b=instruction[12],out=AorM);
	Mux16(a=outA,b=inM,sel=AorM,out=secMuxOut);
	
	// check if insert the data to Aregister according to the d bits
	Or(a=ainstruction,b=instruction[5],out=loadA);
	ARegister(in=firstMuxOut,load=loadA,out=outA,out[0..14]=addressM);
	
	// check if insert the data to Dregister according to d bits
	And(a=cinstruction,b=instruction[4],out=loadD);
	DRegister(in=ALUoutput,load=loadD,out=outD);
	
	// check if write to M according to the d bits
	And(a=cinstruction,b=instruction[3],out=writeM);
	
	///////////////////// jump and inc check /////////////////////
	// zr = 1 if alu output is 0 // == 0 (010)
	// ng = 1 if alu output is negative // < 0 (100)
	// (000) - no jump
	// (111) - jump

	
	    Or(a=zr,b=ng,out=lowerOrEquelZero); // <= 0 (110)
	    Not(in=ng, out=nng); // >= 0 (011)
		Not(in=zr, out=nzr); // != 0 (101)
		And(a=nng,b=nzr,out=greaterThanZero); // > 0 (001)
		
		Mux8Way16(
		sel=instruction[0..2],
        a[0..14]= true, a[15]=false,
        b[0..14]= true, b[15]=greaterThanZero,
        c[0..14]= true, c[15]=zr,
        d[0..14]= true, d[15]=nng,
        e[0..14]= true, e[15]=ng,
        f[0..14]= true, f[15]=nzr,
        g[0..14]= true, g[15]=lowerOrEquelZero,
        h[0..14]= true, h[15]=true,			
		out[15]=jump);

	
	///////////////////// PC part /////////////////////
	And(a=cinstruction,b=jump,out=jumpLoad);
	Not(in=jumpLoad,out=incLoad);
	PC(in=outA,load=jumpLoad,inc=incLoad,reset=reset,out[0..14]=pc);
}
