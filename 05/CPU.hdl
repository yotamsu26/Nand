// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	// instruction meaningful name
	Not(in=instruction[15], out=ainstruction);
	Not(in=ainstruction, out=cinstruction);
	
	// ALU compute
	ALU(x=outD,y=secMuxOut,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		out=ALUoutput,
		out=outM,
		zr=zr,
		ng=ng);
	
	
	// check if A or C insturction
	Mux16(a=instruction,b=ALUoutput,sel=instruction[15],out=firstMuxOut);
	
	// check if compute the A register or the M register
	And(a=cinstruction,b=instruction[12],out=AorM);
	Mux16(a=outA,b=inM,sel=AorM,out=secMuxOut);
	
	// check if insert the data to Aregister according to the d bits
	Or(a=ainstruction,b=instruction[5],out=loadA);
	ARegister(in=firstMuxOut,load=loadA,out=outA,out[0..14]=addressM);
	
	// check if insert the data to Dregister according to d bits
	And(a=cinstruction,b=instruction[4],out=loadD);
	DRegister(in=ALUoutput,load=loadD,out=outD);
	
	// check if write to M according to the d bits
	And(a=cinstruction,b=instruction[3],out=writeM);
	
	///////////////////// jump and inc check /////////////////////
	// zr = 1 if alu output is 0 // == 0 (010)
	// ng = 1 if alu output is negative // < 0 (100)
	// (000) - no jump
	// (111) - jump

	
	    Or(a=zr,b=ng,out=lowerOrEquelZero); // <= 0 (110)
	    Not(in=ng, out=nng); // >= 0 (011)
		Not(in=zr, out=nzr); // != 0 (101)
		And(a=nng,b=nzr,out=greaterThanZero); // > 0 (001)
		
		Mux8Way16(
		sel=instruction[0..2],
        a[0..14]= true, a[15]=false,
        b[0..14]= true, b[15]=greaterThanZero,
        c[0..14]= true, c[15]=zr,
        d[0..14]= true, d[15]=nng,
        e[0..14]= true, e[15]=ng,
        f[0..14]= true, f[15]=nzr,
        g[0..14]= true, g[15]=lowerOrEquelZero,
        h[0..14]= true, h[15]=true,			
		out[15]=jump);

	
	///////////////////// PC part /////////////////////
	And(a=cinstruction,b=jump,out=jumpLoad);
	Not(in=jumpLoad,out=incLoad);
	PC(in=outA,load=jumpLoad,inc=incLoad,reset=reset,out[0..14]=pc);
}